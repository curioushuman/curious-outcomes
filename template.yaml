AWSTemplateFormatVersion: 2010-09-09
Description: >-
  curious-outcomes-api

Transform:
- AWS::Serverless-2016-10-31

# ----------------------------------------------------------------------------

Resources:

  # --------------------------------------------------------------------------
  # Shared
  # --------------------------------------------------------------------------

  # API Gateway
  CuriousOutcomesApi:
    Type: AWS::Serverless::Api
    Properties:
      DefinitionUri: dist/openapi.yaml
      StageName: dev

  # Lambda layers
  LayerCoNodeModules:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: co-layer-node-modules
      Description: Node modules for curious-outcomes
      ContentUri: lambda-layers/co-node-modules
      CompatibleRuntimes:
        - nodejs16.x
      LicenseInfo: 'MIT'
      RetentionPolicy: Retain

  # --------------------------------------------------------------------------
  # Transform event
  # --------------------------------------------------------------------------

  # API Gateway
  # Endpoint receives the external event

  # Lambda / function
  # Transform the external event into an internal one
  FunctionTransformEvent:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/apps/system
      Handler: dist/apps/system/main.handler
      Layers:
        - !Ref LayerCoNodeModules
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Transforms an external event, into an acceptable internal format
      Events:
        CuriousOutcomesApiEvent:
          Type: Api
          Properties:
            Path: /system/events/transform
            Method: POST
            RestApiId:
              Ref: CuriousOutcomesApi

  # --------------------------------------------------------------------------
  # Create course
  # --------------------------------------------------------------------------

  # SNS
  # To handle external events
  SnsTopicCourseCreated:
    Type: AWS::SNS::Topic
    Properties:
     TopicName: !Sub 'co-api-sns-course-created'
     Subscription:
       - Protocol: lambda
         Endpoint: !GetAtt SqsQueueSamTutorial.Arn

  # Lambda / function
  # Create the course
  # TBD

  # SQS
  # Send notification
  # TBD

  # --------------------------------------------------------------------------
  # Create participant
  # --------------------------------------------------------------------------

  # SNS
  # To handle external events
  SnsTopicParticipantCreated:
    Type: AWS::SNS::Topic
    Properties:
     TopicName: !Sub '${StackName}-sns-participant-created'
     Subscription:
       - Protocol: sqs
         Endpoint: !GetAtt SqsParticipantCreated.Arn
     Tags:
       - Key: Name
         Value: !Sub '${StackName}'

  # SQS
  # Throttle (potentially) multiple concurrent events
  SqsParticipantCreated:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${ProjectName}'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}'

  # Lambda / function
  # Create the participant
  # TBD

  # SQS
  # Send notification
  # TBD

# ----------------------------------------------------------------------------

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
